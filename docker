#!/usr/bin/python3
import os
import sys
import subprocess
import shutil
from contextlib import contextmanager, ExitStack

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

@contextmanager
def copy_file(src, dest):
    try:
        shutil.copy(src, dest)
        yield
    finally:
        os.remove(dest)

@contextmanager
def replace_file(target, data):
    try:
        shutil.move(target, target+".org")
        with open(target, "w") as f:
            f.write(data)
        yield
    finally:
        os.remove(target)
        shutil.move(target+".org", target)

def get_dockerfile_path(args):
    dockerfile_candidate = [e for e in sys.argv if "Dockerfile" in e]
    # default_dockerfile = all([e != "-f" for e in sys.argv])
    target_dockerfile = "Dockerfile"
    if dockerfile_candidate:
        target_dockerfile = dockerfile_candidate[0] 
    return target_dockerfile

def get_docker_build_context(args):
    prev = ""
    for arg in args[1:]:
        if prev != "-f" and arg.startswith("/"):
            return arg
        prev = arg
    return "."

def get_subcommand(args):
    for arg in args[1:]:
        if not arg.startswith("-"):
            return arg

def inject_run_env(args, inj):
    if get_subcommand(args) == "run":
        args[2:2] = inj

def replace_from_image(dockerfile, target, to):
    modified_dockerfile = []

    for line in dockerfile:
        fields = line.split(" ")
        if line.startswith("FROM ") and len(fields) > 0 and target in fields[1]:
            fields[1] = to
            line = " ".join(fields)
        modified_dockerfile.append(line)

    return modified_dockerfile

def dockerhub_arm64ize(dockerfile, allowed):
    modified_dockerfile = []

    for line in dockerfile:
        fields = line.split(" ")
        if line.startswith("FROM ") and len(fields) > 0:
            if any([e in fields[1] for e in allowed]):
                fields[1] = "arm64v8/" + fields[1]
                line = " ".join(fields)
                modified_dockerfile.append(line)
                modified_dockerfile.append("COPY qemu-aarch64-static /usr/bin/qemu-aarch64-static")
            else:
                modified_dockerfile.append(line)
        else:
            modified_dockerfile.append(line)

    return modified_dockerfile

def main():
    args = sys.argv

    eprint("Original: ", args)
    sys.argv[0] = "/usr/bin/docker"
    subc = get_subcommand(args)

    with ExitStack() as stack:
        if subc == "run":
            inject_run_env(args, ["-e", "GOOS=linux", "-e", "GOARCH=arm64"])

        if subc == "build":
            target_dockerfile = get_dockerfile_path(args)
            dockerfile = open(target_dockerfile).read().split("\n")

            dockerfile = replace_from_image(dockerfile, "photon:2.0", "photon:3.0")
            dockerfile = dockerhub_arm64ize(dockerfile, ["photon", "node", "golang"])
            stack.enter_context(copy_file("/tmp/qemu-aarch64-static", get_docker_build_context(args) + "/qemu-aarch64-static"))
            stack.enter_context(replace_file(target_dockerfile, "\n".join(dockerfile)))

        eprint("Mutated: ", args)

        subprocess.run(args)

if __name__ == '__main__':
    main()

"""
def _

defer=[]

if sys.argv[1] == "build":
    # sys.argv[2:2] = ["--platform=linux/arm64/v8"]
    # os.environ["DOCKER_BUILDKIT"] = "1"

    # dockerfile[0:0] = ["# syntax = docker/dockerfile:experimental"]

    modified_dockerfile = []
    for line in dockerfile:
        if line.startswith("FROM "):
            # modified_dockerfile.append("RUN --mount=type=bind,target=/usr/bin/qemu-aarch64-static,source=/tmp/qemu-aarch64-static")
            if "photon:2.0" in line:
                line = line.replace("photon:2.0", "photon:3.0")
            if "photon" in line:
                modified_dockerfile.append("FROM " + "arm64v8/"+" ".join(line.split(" ")[1:]))
                modified_dockerfile.append("COPY qemu-aarch64-static /usr/bin/qemu-aarch64-static")
            else:
                modified_dockerfile.append(line)
        else:
            modified_dockerfile.append(line)

    shutil.copy("/tmp/qemu-aarch64-static", ".")
    defer.append(lambda: os.remove("./qemu-aarch64-static"))

    shutil.move(target_dockerfile, target_dockerfile+".org")
    with open(target_dockerfile, "w") as f:
        f.write("\n".join(modified_dockerfile))
    defer.append(lambda: os.remove(target_dockerfile))
    defer.append(lambda: shutil.move(target_dockerfile+".org", target_dockerfile))

    # import pdb; pdb.set_trace()

eprint("Mutated: ", sys.argv)
subprocess.run(sys.argv)
for d in defer:
    d()
# #!/bin/bash -ex
# args=("$@")
# echo "original: ${args[@]}"
# 
# if [[ $1 == "run" ]]; then
#   args=(${args[@]:0:1} -e GOOS=linux -e GOARCH=arm64 ${args[@]:1})
# fi
# 
# /usr/bin/docker "${args[@]}"
"""
